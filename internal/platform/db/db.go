package db

import (
	"database/sql"
	"github.com/Bytesimal/goutils/pkg/coll"
	"log"
)

const dsn = "DATABASE=BLUDB;HOSTNAME=dashdb-txn-sbox-yp-lon02-04.services.eu-gb.bluemix.net;PORT=50001;PROTOCOL=TCPIP;UID=lzx36405;PWD=8k11s2d98lhk81^p;Security=SSL;"

var DB *sql.DB

const maxConn = 1

var reqTables = map[string]string{
	"PRX_PROXIES": `
		CREATE TABLE prx_proxies (
    		id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    		ipv4 VARCHAR(15) NOT NULL,
			port INT,
    		lastTested BIGINT,
    		working BOOLEAN NOT NULL
		);`,
}

func init() {
	// Connect to db
	var err error
	DB, err = sql.Open("pgx", dsn)
	if err != nil {
		log.Fatalf("{proxy} {db} open connection to DB: %s\n", err)
	}
	DB.SetMaxOpenConns(maxConn)
	log.Println("{proxy} {db} Connected")

	// Check if req tables
	rs, err := Exec(`
		SELECT table_name
		FROM sysibm.tables
		WHERE table_schema = 'LZX36405';`)
	if err != nil {
		log.Fatalf("{proxy} {db} access scema list: %s\n", err)
	}

	// List tables
	var tables []string
	for rs.Next() {
		var nS string
		err := rs.Scan(&nS)
		if err != nil {
			tables = append(tables)
		}
		tables = append(tables, nS)
	}
	rs.Close()

	// Add table if doesn't exist
	for t, q := range reqTables {
		if !coll.ContainsStr(tables, t) {
			// Create table if does not exist
			_, err := Exec(q)
			if err != nil {
				log.Fatal(err)
			}
		}
	}
}

func Exec(query string) (*sql.Rows, error) {
	// Prep
	st, err := DB.Prepare(query)
	if err != nil {
		log.Fatalf("prep stmt: %s", err)
	}
	defer st.Close()

	// Exec
	return st.Query()
}

const (
	NoRS      = "Stmt did not create a result set"
	Identical = "SQL0601N"
)
